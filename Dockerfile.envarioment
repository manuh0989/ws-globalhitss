# Usamos la imagen base de PHP con FPM
FROM php:8.1-fpm

# Instalamos las dependencias requeridas por Laravel
RUN apt-get update && \
    apt-get install -y \
    git \
    zip \
    unzip \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    libzip-dev \
    zip

# Limpiamos la lista de paquetes instalados
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Habilitamos las extensiones de PHP necesarias para Laravel
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd zip opcache sockets

# Instalamos Composer
# RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composerk
# RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer



 ENV PHP_OPCACHE_VALIDATE_TIMESTAMPS="0"
 ADD opcache.ini "$PHP_INI_DIR/conf.d/opcache.ini"

# Establecemos el directorio de trabajo en el directorio de la aplicaci贸n Laravel
WORKDIR /var/www

# Copiamos los archivos de la aplicaci贸n Laravel al contenedor
COPY src /var/www
# RUN COMPOSER_VENDOR_DIR="/var/www/vendor" composer install


# Instalamos las dependencias de Composer
# RUN composer install --optimize-autoloader --no-dev

# Configuramos el archivo de configuraci贸n de Nginx
COPY config/nginx/default1.conf /etc/nginx/conf.d/default.conf
COPY config/php/php.ini /usr/local/etc/php/php.ini
COPY opcache.ini /usr/local/etc/php/conf.d/opcache.ini

# Limpiamos el directorio de trabajo de Nginx predeterminado
RUN rm -rf /var/www/*

# Exponemos el puerto 80 para acceder a la aplicaci贸n
#EXPOSE 80

# Ejecutamos PHP-FPM en segundo plano
CMD ["php-fpm"]
